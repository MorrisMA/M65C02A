header
Project: M65C02_IDecode_ROM
File Revision: 0007
Author(s): Michael A. Morris
Description: M65C02 Instruction Decoder ROM
endh

--------------------------------------------------------------------------------
--
--  Copyright 2013-2014 by Michael A. Morris, dba M. A. Morris & Associates
--
--  All rights reserved. The source code contained herein is publicly released
--  under the terms and conditions of the GNU General Public License as conveyed
--  in the license provided below.
--
--  This program is free software: you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the Free
--  Software Foundation, either version 3 of the License, or any later version.
--
--  This program is distributed in the hope that it will be useful, but WITHOUT
--  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
--  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
--  more details.
--
--  You should have received a copy of the GNU General Public License along with
--  this program.  If not, see <http://www.gnu.org/licenses/>, or write to
--
--  Free Software Foundation, Inc.
--  51 Franklin Street, Fifth Floor
--  Boston, MA  02110-1301 USA
--
--  Further, no use of this source code is permitted in any form or means
--  without inclusion of this banner prominently in any derived works.
--
--  Michael A. Morris <morrisma_at_mchsi_dot_com>
--  164 Raleigh Way
--  Huntsville, AL 35811
--  USA
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Revision History:
--------------------------------------------------------------------------------
--
--  0001    13I16   mam     Initial conversion of M65C02_Decoder_ROM used with
--                          the M65C02_ALU.v module. New version changes the
--                          Op[3:0] field into a 5-bit FU_Sel field and a 2-bit
--                          Op field. The new FU_Sel[4:0] field selects/enables
--                          the ALU functional unit, and the new Op[1:0] field
--                          controls the ALU functional unit operations. Removed
--                          Rockwell instructions. Instruction set supported now
--                          only supports original 65C02, otherwise known as the
--                          65SC02, plus the WAI and STP instructions from the
--                          WDC W65C02S.
--
--  0002    13I21   mam     Changed the Q multiplexer select codes. M is now the
--                          the default, and other codes match the other fields.
--
--  0003    13J05   mam     Changed width and encoding of the CCSel fields. The 
--                          PSW set/clr instructions will now be implemented in 
--                          logic unit of ALU, and the opcode field of this ROM 
--                          will be used to generate the mask for the bit in the 
--                          P register. As a result of moving these 7 instruc-
--                          out of the PSW multiplexer and into the ALU, the
--                          CCSel field has been narrowed from 5 to 4 bits. The 
--                          bit eliminated will be retained as a spare bit in
--                          the same position as it has occupied as part of the 
--                          CCSel field.
--
--  0004    13K09   mam     Removed Rsvd (1-bit) field. Assigned that bit to the
--                          FU_Sel field as msb. The new FU_Sel bit functions as
--                          the OR reduction of the 5 least significant bits. In 
--                          this manner another logic level is removed from the
--                          control logic of the core. Converted the structure
--                          from sequential opcodes into row order opcodes, i.e.
--                          swapped order of high nibble and low nibble. Matches
--                          the order of the instruction decode table in the
--                          microprogram. Completed the removal of the Rockwell
--                          bit instructions and the new W65C02S instructions.
--                          Added note to the NOP instructions that indicates
--                          the number of cycles (PC increment operations) that
--                          each requires. (In all cases, the invalid/undefined
--                          instructions do not cause changes in the ALU regis-
--                          ters, but may advance the PC by a defined amount, 
--                          and perform a number of dummy cycles. The number of
--                          cycles for this feature is determined by the data-
--                          sheet for 65SC02.)
--
--  0005    14F17   mam     Normalized the implementation to match the M65C02Duo
--                          version of the instruction decoder. Accepted changes
--                          to the mode field encoding, and some of the correct-
--                          ed instructions.
--
--  0006    14F21   mam     Modified the R multiplexer to select {P, K, A, M}
--                          instead of {P, 0, A, M}. Adds flexibility to the
--                          microprogram. AU can be made to support INC/DEC by
--                          any value other than +1/-1. Similarly, CMP can sup-
--                          port comparisons against a memory value or a con-
--                          stant. The LU operations are similarly affected.
--
--  0007    14H09   mam     Modified the definitions of the Mode field. Deleted
--                          MMU=. VAL is now defined as 0 and INV is defined as
--                          1. Duplicated the table in order to support Kernel
--                          and User modes: User mode is the first 256 locations
--                          and Kernel (default) the second 256 locations. Added
--                          in stack relative addressing for ORA/AND/EOR/ADC/
--                          LDA/STA/SBC, RMBx/SMBx/BBRx/BBSx, PEA/PEI/PER,
--                          COP #imm, COP dp, JMP/JSR (sp,S),Y, BRA/BSR rel16,
--                          MWT/MWF, IND and SIZ (addressing mode and/or opera-
--                          tion size override/prefix/escape) instructions.
--                          MWT/MWF instructions are privileged instructions
--                          available only in Kernel mode. They move a 16-bit
--                          word between zero page and the IO page. The Y regis-
--                          ter indexes the IO page. The single byte operand
--                          provides the zero page address of the 16-bit 
--                          src/dst, MWT (Y),dp or MWF dp,(Y). Also included in
--                          advanced instruction set are 16-bit stack pop opera-
--                          tions: PLW dp, and PLW abs. PEA is actually listed
--                          as PHW #imm16, and PEI is listed as PHW dp. In addi-
--                          tion, the instruction PHW abs has been added instead
--                          of JSR (abs,X). There now only 12 unused opcodes re-
--                          maining in the instruction set. These twelve are re-
--                          served for the user. The expectation is that these
--                          opcodes will be used for implementing primitive
--                          operations/words useful in a FORTH virtual machine.
--
--------------------------------------------------------------------------------
-- Mode Field
--------------------------------------------------------------------------------

VAL     .asm    0   -- Valid Instruction (not otherwise decoded)
INV     .asm    1   -- Invalid/Unused Instructions
COP     .asm    2   -- COP Instruction  (CO-Processor trap, software trap)
BRK     .asm    3   -- BRK Instruction  (BReaK execution, software trap  )
PFX     .asm    4   -- PFX Instructions (SIZe and INDirect Overrides     )
PHR     .asm    5   -- PHR Instruction  (PHR rel16                       )
PHW     .asm    6   -- PHW Instructions (PHW #imm16, PHW dp, PHW abs     )
WAI     .asm    7   -- WAI Instruction  (WAit for Interrupt              )

--------------------------------------------------------------------------------
-- ROM ( output ) Field definitions
--------------------------------------------------------------------------------

Mode    .def    3   -- Instruction Class or Specific Instruction
RMW     .def    1   -- Read-Modify-Write Instruction Type Field
FU_Sel  .def    6   -- ALU Functional Unit Select (one-hot)
ALU_OP  .def    2   -- ALU Operation
QSel    .def    2   -- ALU Q Operand Select
RSel    .def    2   -- ALU R Operand Select
CSel    .def    2   -- ALU Arithmetic Unit Carry Input Select
WSel    .def    3   -- ALU Register Write Select
OSel    .def    3   -- ALU Register Output Select
CCSel   .def    4   -- ALU Condition Code Operation
Opcode  .def    8   -- Instruction Opcode, bit mask, etc.

--------------------------------------------------------------------------------
--  Constant definitions
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--  ALU Functional Unit Select definitions

LST     .equ    48  -- Select Load/Store/Transfer Functional Unit
LU      .equ    40  -- Select Logic Unit (AND/ORA/EOR, BIT/TRB/TSB,
                    --                    RMB/SMB/BBR/BBS,
                    --                    SEC/CLC/SEI/CLI/SED/CLD/CLV
SU      .equ    36  -- Select Shift/Rotate Unit (ASL/ROL/LSR/ROR)
ADD     .equ    34  -- Select Decimal/Binary Adder (ADC/SBC)
IDC     .equ    33  -- Select Bin. Add (INC/DEC/CMP/INX/DEX/CPX/INY/DEY/CPY) 

--------------------------------------------------------------------------------
--  General Definitions
--------------------------------------------------------------------------------

NOP     .equ    0   -- No operation and/or default operation
XFR     .equ    0   -- No operation and/or default operation

--------------------------------------------------------------------------------
--  ALU Operation Field (ALU_Op) Definitions
--------------------------------------------------------------------------------

--  Logic Unit Operations

AND     .equ    1   -- ALU <=  A & M;   N <= ALU[7]; Z <= ~|ALU;
ORA     .equ    2   -- ALU <=  A | M;   N <= ALU[7]; Z <= ~|ALU;
EOR     .equ    3   -- ALU <=  A ^ M;   N <= ALU[7]; Z <= ~|ALU;

BIT     .equ    1   -- ALU <=  A & M;   N <= M[7]; V <= M[6]; Z <= ~|(A & M)
-- BIT #imm         -- ALU <=  A & M;                         Z <= ~|(A & M)   
TRB     .equ    0   -- ALU <= ~A & M;                         Z <= ~|(A & M)
TSB     .equ    2   -- ALU <=  A | M;                         Z <= ~|(A & M)

RMB     .equ    0   -- ALU <= ~K & M;  (K <= (1 << bit))
SMB     .equ    2   -- ALU <=  K | M;  (K <= (1 << bit))
BBR     .equ    1   -- ALU <=  K & M;  (K <= (1 << bit))
BBS     .equ    1   -- ALU <=  K & M;  (K <= (1 << bit))

CLC     .equ    0   -- ALU <= ~K & P;   C <= 0; (K <= 0x01)
SEC     .equ    2   -- ALU <=  K | P;   C <= 1; (K <= 0x01)
CLI     .equ    0   -- ALU <= ~K & P;   I <= 0; (K <= 0x04)
SEI     .equ    2   -- ALU <=  K | P;   I <= 1; (K <= 0x04)
CLD     .equ    0   -- ALU <= ~K & P;   D <= 0; (K <= 0x08)
SED     .equ    2   -- ALU <=  K | P;   D <= 1; (K <= 0x08)
CLV     .equ    0   -- ALU <= ~K & P;   V <= 0; (K <= 0x40)

--REP     .equ    0   -- ALU <= ~M & P;   P <= ALU   
--SEP     .equ    2   -- ALU <=  M | P;   P <= ALU

--  Shift Unit Operations (Note: for ASL/LSR, Ci <= 0; for ROL/ROR, Ci <= C)

ASL     .equ    0   -- ALU <= {R[6:0],Ci};N <= ALU[7]; Z <= ~|ALU; C <= R[7]
ROL     .equ    0   -- ALU <= {R[6:0],Ci};N <= ALU[7]; Z <= ~|ALU; C <= R[7]
LSR     .equ    1   -- ALU <= {Ci,R[7:1]};N <= ALU[7]; Z <= ~|ALU; C <= R[0]
ROR     .equ    1   -- ALU <= {Ci,R[7:1]} N <= ALU[7]; Z <= ~|ALU; C <= R[0]

--  Arithmetic Unit Operations

ADC     .equ    0   -- ALU <= Q +  M + C; N <= ALU[7]; Z <= ~|ALU;
--                                        V <= OVF;    C <= COut;
SBC     .equ    1   -- ALU <= Q + ~M + C; N <= ALU[7]; Z <= ~|ALU;
--                                        V <= OVF;    C <= COut;
INC     .equ    0   -- ALU <= Q +  0 + 1; N <= ALU[7]; Z <= ~|ALU;
DEC     .equ    1   -- ALU <= Q + ~0 + 0; N <= ALU[7]; Z <= ~|ALU;
CMP     .equ    1   -- ALU <= Q + ~M + 1; N <= ALU[7]; Z <= ~|ALU;
--                                                     C <= COut

--------------------------------------------------------------------------------
--  ALU Left (L/Q) Operand Select
--------------------------------------------------------------------------------

L_M     .equ    0   -- L <= M (default)
L_A     .equ    1   -- L <= A
L_K     .equ    2   -- L <= K
L_P     .equ    3   -- L <= P

Q_M     .equ    0   -- Q <= M (default)
Q_A     .equ    1   -- Q <= A
Q_X     .equ    2   -- Q <= X
Q_Y     .equ    3   -- Q <= Y

--------------------------------------------------------------------------------
--  ALU Right (R) Operand Select
--------------------------------------------------------------------------------

R_M     .equ    0   -- R <= M (default)
R_A     .equ    1   -- R <= A
R_K     .equ    2   -- R <= K
R_P     .equ    3   -- R <= P

--------------------------------------------------------------------------------
--  ALU Carry Input Multiplexer Select
--------------------------------------------------------------------------------

Ci_C    .equ    0   -- Ci <= C (default)
Ci_S    .equ    1   -- Ci <= Q[7]
Ci_0    .equ    2   -- Ci <= 0
Ci_1    .equ    3   -- Ci <= 1

--------------------------------------------------------------------------------
--  ALU Register Write Select Definitions
--------------------------------------------------------------------------------

WS_A    .equ    1   -- Write Accumulator (Binary)
WS_X    .equ    2   -- Write X (Pre-Index Register)
WS_Y    .equ    3   -- Write Y (Post-Index Register)
WS_R    .equ    4   -- Write Registers
WS_S    .equ    5   -- Write S (Stack Pointer)
WS_P    .equ    6   -- Write P (Processor Status Word)
WS_M    .equ    7   -- Write M (ALU Output)

--------------------------------------------------------------------------------
--  ALU Register Output Select Definitions
--------------------------------------------------------------------------------

OS_A    .equ    1   -- ALU <= A
OS_X    .equ    2   -- ALU <= X
OS_Y    .equ    3   -- ALU <= Y
OS_T    .equ    4   -- ALU <= Tmp (Operand Register 2)
OS_S    .equ    5   -- ALU <= S   (Stack Pointer)
OS_P    .equ    6   -- ALU <= P   (Processor Status Word)
OS_M    .equ    7   -- ALU <= M   (Memory Data Input, Operand Register 1)

--------------------------------------------------------------------------------
--  Condition Code Operation/Output Select Definitions
--      Note: CC_Out = 1 unless (CCSel[4:3] != 2'b01)
--------------------------------------------------------------------------------

TRUE    .equ    0   -- CC_Out <=  1

BRA     .equ    0   -- CC_Out <=  1
BCC     .equ    8   -- CC_Out <= ~C;
BCS     .equ    9   -- CC_Out <=  C;
BNE     .equ    10  -- CC_Out <= ~Z;
BEQ     .equ    11  -- CC_Out <=  Z;
BVC     .equ    12  -- CC_Out <= ~V;
BVS     .equ    13  -- CC_Out <=  V;
BPL     .equ    14  -- CC_OUT <= ~N;
BMI     .equ    15  -- CC_Out <=  N;

PSW     .equ    0   -- P <= ALU;
Trap    .equ    1   -- P.4 <= 1 on push P during BRK
Z       .equ    2   --                        Z <= ~|(A & M);
NVZ     .equ    3   -- N <= M[7];  V <= M[6]; Z <= ~|(A & M);
PHP     .equ    4   -- P.4 <= 1 on push P during PHP
NZ      .equ    5   -- N <= ALU[7];           Z <= ~|ALU;
NZC     .equ    6   -- N <= ALU[7];           Z <= ~|ALU; C <= COut;
NVZC    .equ    7   -- N <= ALU[7]; V <= OV;  Z <= ~|ALU; C <= COut;

--------------------------------------------------------------------------------
-- Mask Settings
--------------------------------------------------------------------------------

K_0     .equ    1   -- Bit 0
K_1     .equ    2   -- Bit 1
K_2     .equ    4   -- Bit 2
K_3     .equ    8   -- Bit 3
K_4     .equ    16  -- Bit 4
K_5     .equ    32  -- Bit 5
K_6     .equ    64  -- Bit 6
K_7     .equ    128 -- Bit 7

K_C     .equ    1   -- Mask for P.C (Carry Flag)
K_Z     .equ    2   -- Mask for P.Z (Zero Flag)
K_I     .equ    4   -- Mask for P.I (Interrupt Mask)
K_D     .equ    8   -- Mask for P.D (Decimal Mode Flag)
K_B     .equ    16  -- Mask for P.B (BRK/PHP Flag)
K_M     .equ    32  -- Mask for P.M (Unused bit - always 1)
K_V     .equ    64  -- Mask for P.V (oVerflow Flag)
K_N     .equ    128 -- Mask for P.N (Negative Flag)

--------------------------------------------------------------------------------
--
--  Added annotations regarding the implementation of the various opcodes in re-
--  lation to the various microprocessors. As currently defined in this file,
--  the opcodes being decoded represent the instruction set of the original
--  65C02. In other words, the non-NOP instructions are for the W65C02/G65SC02.
--  In the right hand margin comments, opcodes that were added by these two
--  processors to the base MOS6502 instruction set are marked with an asterisk.
--  
--  Also placed in parentheses the instructions added by the Rockwell R65C02,
--  and marked those instructions with an addition symbol (+). WDC also added
--  two instructions from the W65C816/W65C802 processor instruction set, and
--  they are marked with an ampersand (&).
--
--  The instruction set of the M65C02 starts from the instruction set of G65SC02
--  and adds the Rockwell (+), and the W65C816/W65C802 (&) instructions. The 
--  resulting instruction set is equivalent to the instruction set of the WDC
--  W65C02S microprocessor.
--
--  There are additional instructions marked by the octothorpe (#) which will be 
--  added to the M65C02 instruction set to form the M65C02A's instruction set. 
--  The new instructions for the M65C02A are generally taken from the W65C816
--  instruction set. There are a few unique M65C02A instructions, but generally,
--  the new instructions add the W65C816's stack relative addresssing mode in-
--  structions.
--
--  The additional instructions discussed above can be included without any
--  modifications to the core logic; only updates to the microcode ROMs are re-
--  quired. 
--
--------------------------------------------------------------------------------

_start:
_User:      .org    0                                   -- User Mode

--------------------------------------------------------------------------------

    BRK     0,LST,XFR,Q_M,R_M,Ci_C,WS_P,    ,Trap,0x00  -- 00: BRK #imm
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,BPL ,0x10  -- 10: BPL rel
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,    ,0x20  -- 20: JSR abs
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,BMI ,0x30  -- 30: BMI rel
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_P,OS_M,PSW ,0x40  -- 40: RTI
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,BVC ,0x50  -- 50: BVC rel
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,    ,0x60  -- 60: RTS
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,BVS ,0x70  -- 70: BVS rel
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,BRA ,0x80  -- 80:*BRA rel
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,BCC ,0x90  -- 90: BCC rel
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_Y,OS_M,NZ  ,0xA0  -- A0: LDY #imm
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,BCS ,0xB0  -- B0: BCS rel
    VAL     0,IDC,CMP,Q_Y,R_M,Ci_1,WS_P,    ,NZC ,0xC0  -- C0: CPY #imm
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,BNE ,0xD0  -- D0: BNE rel
    VAL     0,IDC,CMP,Q_X,R_M,Ci_1,WS_P,    ,NZC ,0xE0  -- E0: CPX #imm
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,BEQ ,0xF0  -- F0: BEQ rel

--------------------------------------------------------------------------------

    VAL     0,LU ,ORA,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x01  -- 01: ORA (dp,X)
    VAL     0,LU ,ORA,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x11  -- 11: ORA (dp),Y
    VAL     0,LU ,AND,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x21  -- 21: AND (dp,X)
    VAL     0,LU ,AND,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x31  -- 31: AND (dp),Y
    VAL     0,LU ,EOR,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x41  -- 41: EOR (dp,X)
    VAL     0,LU ,EOR,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x51  -- 51: EOR (dp),Y
    VAL     0,ADD,ADC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0x61  -- 61: ADC (dp,X)
    VAL     0,ADD,ADC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0x71  -- 71: ADC (dp),Y
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_A,    ,0x81  -- 81: STA (dp,X)
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_A,    ,0x91  -- 91: STA (dp),Y
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_A,OS_M,NZ  ,0xA1  -- A1: LDA (dp,X)
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_A,OS_M,NZ  ,0xB1  -- B1: LDA (dp),Y
    VAL     0,IDC,CMP,Q_A,R_M,Ci_1,WS_P,    ,NZC ,0xC1  -- C1: CMP (dp,X)
    VAL     0,IDC,CMP,Q_A,R_M,Ci_1,WS_P,    ,NZC ,0xD1  -- D1: CMP (dp),Y
    VAL     0,ADD,SBC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0xE1  -- E1: SBC (dp,X)
    VAL     0,ADD,SBC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0xF1  -- F1: SBC (dp),Y

--------------------------------------------------------------------------------
 
    COP     0,LST,XFR,Q_M,R_M,Ci_C,WS_X,OS_M,NZ  ,0x02  -- 02:#COP dp
    VAL     0,LU ,ORA,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x12  -- 12:*ORA (dp)
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,    ,0x22  -- 22:#JSR (sp,S),Y
    VAL     0,LU ,AND,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x32  -- 32:*AND (dp)
    COP     0,LST,XFR,Q_M,R_M,Ci_C,WS_X,OS_M,NZ  ,0x42  -- 42:#COP #imm
    VAL     0,LU ,EOR,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x52  -- 52:*EOR (dp)
    PHR     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x62  -- 62:#PHR rel16
    VAL     0,ADD,ADC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0x72  -- 72:*ADC (dp)
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,    ,0x82  -- 82:#JMP (sp,S),Y
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_A,    ,0x92  -- 92:*STA (dp)
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_X,OS_M,NZ  ,0xA2  -- A2: LDX #imm
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_A,OS_M,NZ  ,0xB2  -- B2:*LDA (dp)
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_M,    ,0xC2  -- C2:#PLW dp
    VAL     0,IDC,CMP,Q_A,R_M,Ci_1,WS_P,    ,NZC ,0xD2  -- D2:*CMP (dp)
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_M,    ,0xE2  -- E2:#PLW abs
    VAL     0,ADD,SBC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0xF2  -- F2:*SBC (dp)

--------------------------------------------------------------------------------

    VAL     0,LU ,ORA,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x03  -- 03:#ORA sp,S
    VAL     0,LU ,ORA,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x13  -- 13:#ORA (sp,S),Y
    VAL     0,LU ,AND,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x23  -- 23:#AND sp,S
    VAL     0,LU ,AND,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x33  -- 33:#AND (sp,S),Y
    VAL     0,LU ,EOR,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x43  -- 43:#EOR sp,S
    VAL     0,LU ,EOR,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x53  -- 53:#EOR (sp,S),Y
    VAL     0,ADD,ADC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0x63  -- 63:#ADC sp,S
    VAL     0,ADD,ADC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0x73  -- 73:#ADC (sp,S),Y
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_A,    ,0x83  -- 83:#STA sp,S
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_A,    ,0x93  -- 93:#STA (sp,S),Y
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_A,OS_M,NZ  ,0xA3  -- A3:#LDA sp,S
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_A,OS_M,NZ  ,0xB3  -- B3:#LDA (sp,S),Y
    VAL     0,IDC,CMP,Q_A,R_M,Ci_1,WS_P,    ,NZC ,0xC3  -- C3:#CMP sp,S
    VAL     0,IDC,CMP,Q_A,R_M,Ci_1,WS_P,    ,NZC ,0xD3  -- D3:#CMP (sp,S),Y
    VAL     0,ADD,SBC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0xE3  -- E3:#SBC sp,S
    VAL     0,ADD,SBC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0xF3  -- F3:#SBC (sp,S),Y

--------------------------------------------------------------------------------

    VAL     1,LU ,TSB,L_A,R_M,Ci_C,WS_P,    ,Z   ,0x04  -- 04:*TSB dp
    VAL     1,LU ,TRB,L_A,R_M,Ci_C,WS_P,    ,Z   ,0x14  -- 14:*TRB dp
    VAL     0,LU ,BIT,L_A,R_M,Ci_C,WS_P,    ,NVZ ,0x24  -- 24: BIT dp
    VAL     0,LU ,BIT,L_A,R_M,Ci_C,WS_P,    ,NVZ ,0x34  -- 34:*BIT dp,X
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x44  -- 44:#NOP (MWT dp,(Y))
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x54  -- 54:#NOP (MWF dp,(Y))
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,    ,0x64  -- 64:*STZ dp
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,    ,0x74  -- 74:*STZ dp,X
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_Y,    ,0x84  -- 84: STY dp
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_Y,    ,0x94  -- 94: STY dp,X
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_Y,OS_M,NZ  ,0xA4  -- A4: LDY dp
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_Y,OS_M,NZ  ,0xB4  -- B4: LDY dp,X
    VAL     0,IDC,CMP,Q_Y,R_M,Ci_1,WS_P,    ,NZC ,0xC4  -- C4: CPY dp
    PHW     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0xD4  -- D4:#PHW dp
    VAL     0,IDC,CMP,Q_X,R_M,Ci_1,WS_P,    ,NZC ,0xE4  -- E4: CPX dp
    PHW     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0xF4  -- F4:#PHW #imm16

--------------------------------------------------------------------------------

    VAL     0,LU ,ORA,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x05  -- 05: ORA dp
    VAL     0,LU ,ORA,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x15  -- 15: ORA dp,X
    VAL     0,LU ,AND,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x25  -- 25: AND dp
    VAL     0,LU ,AND,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x35  -- 35: AND dp,X
    VAL     0,LU ,EOR,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x45  -- 45: EOR dp
    VAL     0,LU ,EOR,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x55  -- 55: EOR dp,X
    VAL     0,ADD,ADC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0x65  -- 65: ADC dp
    VAL     0,ADD,ADC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0x75  -- 75: ADC dp,X
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_A,    ,0x85  -- 85: STA dp
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_A,    ,0x95  -- 95: STA dp,X
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_A,OS_M,NZ  ,0xA5  -- A5: LDA dp
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_A,OS_M,NZ  ,0xB5  -- B5: LDA dp,X
    VAL     0,IDC,CMP,Q_A,R_M,Ci_1,WS_P,    ,NZC ,0xC5  -- C5: CMP dp
    VAL     0,IDC,CMP,Q_A,R_M,Ci_1,WS_P,    ,NZC ,0xD5  -- D5: CMP dp,X
    VAL     0,ADD,SBC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0xE5  -- E5: SBC dp
    VAL     0,ADD,SBC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0xF5  -- F5: SBC dp,X

--------------------------------------------------------------------------------

    VAL     1,SU ,ASL,Q_M,R_M,Ci_0,WS_P,    ,NZC ,0x06  -- 06: ASL dp
    VAL     1,SU ,ASL,Q_M,R_M,Ci_0,WS_P,    ,NZC ,0x16  -- 16: ASL dp,X
    VAL     1,SU ,ROL,Q_M,R_M,Ci_C,WS_P,    ,NZC ,0x26  -- 26: ROL dp
    VAL     1,SU ,ROL,Q_M,R_M,Ci_C,WS_P,    ,NZC ,0x36  -- 36: ROL dp,X
    VAL     1,SU ,LSR,Q_M,R_M,Ci_0,WS_P,    ,NZC ,0x46  -- 46: LSR dp
    VAL     1,SU ,LSR,Q_M,R_M,Ci_0,WS_P,    ,NZC ,0x56  -- 56: LSR dp,X
    VAL     1,SU ,ROR,Q_M,R_M,Ci_C,WS_P,    ,NZC ,0x66  -- 66: ROR dp
    VAL     1,SU ,ROR,Q_M,R_M,Ci_C,WS_P,    ,NZC ,0x76  -- 76: ROR dp,X
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_X,    ,0x86  -- 86: STX dp
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_X,    ,0x96  -- 96: STX dp,Y
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_X,OS_M,NZ  ,0xA6  -- A6: LDX dp
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_X,OS_M,NZ  ,0xB6  -- B6: LDX dp,Y
    VAL     1,IDC,DEC,Q_M,R_K,Ci_0,WS_P,    ,NZ  ,0x00  -- C6: DEC dp
    VAL     1,IDC,DEC,Q_M,R_K,Ci_0,WS_P,    ,NZ  ,0x00  -- D6: DEC dp,X
    VAL     1,IDC,INC,Q_M,R_K,Ci_1,WS_P,    ,NZ  ,0x00  -- E6: INC dp
    VAL     1,IDC,INC,Q_M,R_K,Ci_1,WS_P,    ,NZ  ,0x00  -- F6: INC dp,X
    
--------------------------------------------------------------------------------

    VAL     1,LU ,RMB,L_K,R_M,Ci_C,    ,    ,    ,K_0   -- 07:+RMB0 dp
    VAL     1,LU ,RMB,L_K,R_M,Ci_C,    ,    ,    ,K_1   -- 17:+RMB1 dp
    VAL     1,LU ,RMB,L_K,R_M,Ci_C,    ,    ,    ,K_2   -- 27:+RMB2 dp
    VAL     1,LU ,RMB,L_K,R_M,Ci_C,    ,    ,    ,K_3   -- 37:+RMB3 dp
    VAL     1,LU ,RMB,L_K,R_M,Ci_C,    ,    ,    ,K_4   -- 47:+RMB4 dp
    VAL     1,LU ,RMB,L_K,R_M,Ci_C,    ,    ,    ,K_5   -- 57:+RMB5 dp
    VAL     1,LU ,RMB,L_K,R_M,Ci_C,    ,    ,    ,K_6   -- 67:+RMB6 dp
    VAL     1,LU ,RMB,L_K,R_M,Ci_C,    ,    ,    ,K_7   -- 77:+RMB7 dp
    VAL     1,LU ,SMB,L_K,R_M,Ci_C,    ,    ,    ,K_0   -- 87:+SMB0 dp
    VAL     1,LU ,SMB,L_K,R_M,Ci_C,    ,    ,    ,K_1   -- 97:+SMB1 dp
    VAL     1,LU ,SMB,L_K,R_M,Ci_C,    ,    ,    ,K_2   -- A7:+SMB2 dp
    VAL     1,LU ,SMB,L_K,R_M,Ci_C,    ,    ,    ,K_3   -- B7:+SMB3 dp
    VAL     1,LU ,SMB,L_K,R_M,Ci_C,    ,    ,    ,K_4   -- C7:+SMB4 dp
    VAL     1,LU ,SMB,L_K,R_M,Ci_C,    ,    ,    ,K_5   -- D7:+SMB5 dp
    VAL     1,LU ,SMB,L_K,R_M,Ci_C,    ,    ,    ,K_6   -- E7:+SMB6 dp
    VAL     1,LU ,SMB,L_K,R_M,Ci_C,    ,    ,    ,K_7   -- F7:+SMB7 dp

--------------------------------------------------------------------------------

    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_P,PHP ,0x08  -- 08: PHP
    VAL     0,LU ,CLC,L_K,R_P,Ci_C,WS_P,    ,PSW ,K_C   -- 18: CLC
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_P,OS_M,PSW ,0x28  -- 28: PLP
    VAL     0,LU ,SEC,L_K,R_P,Ci_C,WS_P,    ,PSW ,K_C   -- 38: SEC
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_A,    ,0x48  -- 48: PHA
    VAL     0,LU ,CLI,L_K,R_P,Ci_C,WS_P,    ,PSW ,K_I   -- 58: CLI
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_A,OS_M,NZ  ,0x68  -- 68: PLA
    VAL     0,LU ,SEI,L_K,R_P,Ci_C,WS_P,    ,PSW ,K_I   -- 78: SEI
    VAL     0,IDC,DEC,Q_Y,R_K,Ci_0,WS_Y,    ,NZ  ,0x00  -- 88: DEY
    VAL     0,LST,XFR,Q_A,R_M,Ci_C,WS_A,OS_Y,NZ  ,0x98  -- 98: TYA
    VAL     0,LST,XFR,Q_A,R_M,Ci_C,WS_Y,OS_A,NZ  ,0xA8  -- A8: TAY
    VAL     0,LU ,CLV,L_K,R_P,Ci_C,WS_P,    ,PSW ,K_V   -- B8: CLV
    VAL     0,IDC,INC,Q_Y,R_K,Ci_1,WS_Y,    ,NZ  ,0x00  -- C8: INY
    VAL     0,LU ,CLD,L_K,R_P,Ci_C,WS_P,    ,PSW ,K_D   -- D8: CLD
    VAL     0,IDC,INC,Q_X,R_K,Ci_1,WS_X,    ,NZ  ,0x00  -- E8: INX
    VAL     0,LU ,SED,L_K,R_P,Ci_C,WS_P,    ,PSW ,K_D   -- F8: SED

--------------------------------------------------------------------------------

    VAL     0,LU ,ORA,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x09  -- 09: ORA #imm
    VAL     0,LU ,ORA,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x19  -- 19: ORA abs,Y
    VAL     0,LU ,AND,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x29  -- 29: AND #imm
    VAL     0,LU ,AND,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x39  -- 39: AND abs,Y
    VAL     0,LU ,EOR,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x49  -- 49: EOR #imm
    VAL     0,LU ,EOR,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x59  -- 59: EOR abs,Y
    VAL     0,ADD,ADC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0x69  -- 69: ADC #imm
    VAL     0,ADD,ADC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0x79  -- 79: ADC abs,Y
    VAL     0,LU ,BIT,L_A,R_M,Ci_C,WS_P,    ,Z   ,0x89  -- 89:*BIT #imm
    VAL     0,LST,XFR,Q_A,R_M,Ci_C,    ,OS_A,    ,0x99  -- 99: STA abs,Y
    VAL     0,LST,XFR,Q_A,R_M,Ci_C,WS_A,OS_M,NZ  ,0xA9  -- A9: LDA #imm
    VAL     0,LST,XFR,Q_A,R_M,Ci_C,WS_A,OS_M,NZ  ,0xB9  -- B9: LDA abs,Y
    VAL     0,IDC,CMP,Q_A,R_M,Ci_1,WS_P,    ,NZC ,0xC9  -- C9: CMP #imm
    VAL     0,IDC,CMP,Q_A,R_M,Ci_1,WS_P,    ,NZC ,0xD9  -- D9: CMP abs,Y
    VAL     0,ADD,SBC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0xE9  -- E9: SBC #imm
    VAL     0,ADD,SBC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0xF9  -- F9: SBC abs,Y

--------------------------------------------------------------------------------

    VAL     0,SU ,ASL,Q_A,R_M,Ci_0,WS_A,    ,NZC ,0x0A  -- 0A: ASL A
    VAL     0,IDC,INC,Q_A,R_K,Ci_1,WS_A,    ,NZ  ,0x00  -- 1A:*INC A
    VAL     0,SU ,ROL,Q_A,R_M,Ci_C,WS_A,    ,NZC ,0x2A  -- 2A: ROL A
    VAL     0,IDC,DEC,Q_A,R_K,Ci_0,WS_A,    ,NZ  ,0x00  -- 3A:*DEC A
    VAL     0,SU ,LSR,Q_A,R_M,Ci_0,WS_A,    ,NZC ,0x4A  -- 4A: LSR A
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_Y,    ,0x5A  -- 5A:*PHY
    VAL     0,SU ,ROR,Q_A,R_M,Ci_C,WS_A,    ,NZC ,0x6A  -- 6A: ROR A
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_Y,OS_M,NZ  ,0x7A  -- 7A:*PLY
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_A,OS_X,NZ  ,0x8A  -- 8A: TXA
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_S,OS_X,    ,0x9A  -- 9A: TXS
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_X,OS_A,NZ  ,0xAA  -- AA: TAX
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_X,OS_S,NZ  ,0xBA  -- BA: TSX
    VAL     0,IDC,DEC,Q_X,R_K,Ci_0,WS_X,    ,NZ  ,0x00  -- CA: DEX
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_X,    ,0xDA  -- DA:*PHX
    VAL     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0xEA  -- EA: NOP
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_X,OS_M,NZ  ,0xFA  -- FA:*PLX

--------------------------------------------------------------------------------
-- 0B...BB: 1 byte, 1 cycle
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x0B  -- 0B: NOP
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x1B  -- 1B: NOP
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x2B  -- 2B: NOP
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x3B  -- 3B: NOP
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x4B  -- 4B: NOP
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x5B  -- 5B: NOP
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x6B  -- 6B: NOP
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x7B  -- 7B: NOP
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x8B  -- 8B: NOP
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x9B  -- 9B: NOP
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0xAB  -- AB: NOP
    INV     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0xBB  -- BB: NOP
    WAI     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0xCB  -- CB:&WAI
    VAL     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0xDB  -- DB:&STP
    PFX     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0xEB  -- EB:#SIZ
    PFX     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0xFB  -- FB:#IND

--------------------------------------------------------------------------------

    VAL     1,LU ,TSB,L_A,R_M,Ci_C,WS_P,    ,Z   ,0x0C  -- 0C:*TSB abs
    VAL     1,LU ,TRB,L_A,R_M,Ci_C,WS_P,    ,Z   ,0x1C  -- 1C:*TRB abs
    VAL     0,LU ,BIT,L_A,R_M,Ci_C,WS_P,    ,NVZ ,0x2C  -- 2C: BIT abs
    VAL     0,LU ,BIT,L_A,R_M,Ci_C,WS_P,    ,NVZ ,0x3C  -- 3C:*BIT abs,X
    VAL     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x4C  -- 4C: JMP abs
    VAL     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x5C  -- 5C:#BRA rel16
    VAL     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x6C  -- 6C: JMP (abs)
    VAL     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0x7C  -- 7C:*JMP (abs,X)
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_Y,    ,0x8C  -- 8C: STY abs
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,    ,0x9C  -- 9C:*STZ abs
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_Y,OS_M,NZ  ,0xAC  -- AC: LDY abs
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_Y,OS_M,NZ  ,0xBC  -- BC: LDY abs,X
    VAL     0,IDC,CMP,Q_Y,R_M,Ci_1,WS_P,    ,NZC ,0xCC  -- CC: CPY abs
    VAL     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0xDC  -- DC:#BSR rel16
    VAL     0,IDC,CMP,Q_X,R_M,Ci_1,WS_P,    ,NZC ,0xEC  -- EC: CPX abs
    PHW     0,NOP,NOP,Q_M,R_M,Ci_C,    ,    ,    ,0xFC  -- FC:#PHW abs

--------------------------------------------------------------------------------

    VAL     0,LU ,ORA,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x0D  -- 0D: ORA abs
    VAL     0,LU ,ORA,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x1D  -- 1D: ORA abs,X
    VAL     0,LU ,AND,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x2D  -- 2D: AND abs
    VAL     0,LU ,AND,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x3D  -- 3D: AND abs,X
    VAL     0,LU ,EOR,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x4D  -- 4D: EOR abs
    VAL     0,LU ,EOR,L_A,R_M,Ci_C,WS_A,    ,NZ  ,0x5D  -- 5D: EOR abs,X
    VAL     0,ADD,ADC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0x6D  -- 6D: ADC abs
    VAL     0,ADD,ADC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0x7D  -- 7D: ADC abs,X
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_A,    ,0x8D  -- 8D: STA abs
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_A,    ,0x9D  -- 9D: STA abs,X
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_A,OS_M,NZ  ,0xAD  -- AD: LDA abs
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_A,OS_M,NZ  ,0xBD  -- BD: LDA abs,X
    VAL     0,IDC,CMP,Q_A,R_M,Ci_1,WS_P,    ,NZC ,0xCD  -- CD: CMP abs
    VAL     0,IDC,CMP,Q_A,R_M,Ci_1,WS_P,    ,NZC ,0xDD  -- DD: CMP abs,X
    VAL     0,ADD,SBC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0xED  -- ED: SBC abs
    VAL     0,ADD,SBC,Q_A,R_M,Ci_C,WS_A,    ,NVZC,0xFD  -- FD: SBC abs,X

--------------------------------------------------------------------------------

    VAL     1,SU ,ASL,Q_M,R_M,Ci_0,WS_P,    ,NZC ,0x0E  -- 0E: ASL abs
    VAL     1,SU ,ASL,Q_M,R_M,Ci_0,WS_P,    ,NZC ,0x1E  -- 1E: ASL abs,X
    VAL     1,SU ,ROL,Q_M,R_M,Ci_C,WS_P,    ,NZC ,0x2E  -- 2E: ROL abs
    VAL     1,SU ,ROL,Q_M,R_M,Ci_C,WS_P,    ,NZC ,0x3E  -- 3E: ROL abs,X
    VAL     1,SU ,LSR,Q_M,R_M,Ci_0,WS_P,    ,NZC ,0x4E  -- 4E: LSR abs
    VAL     1,SU ,LSR,Q_M,R_M,Ci_0,WS_P,    ,NZC ,0x5E  -- 5E: LSR abs,X
    VAL     1,SU ,ROR,Q_M,R_M,Ci_C,WS_P,    ,NZC ,0x6E  -- 6E: ROR abs
    VAL     1,SU ,ROR,Q_M,R_M,Ci_C,WS_P,    ,NZC ,0x7E  -- 7E: ROR abs,X
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,OS_X,    ,0x8E  -- 8E: STX abs
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,    ,    ,    ,0x9E  -- 9E:*STZ abs,X
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_X,OS_M,NZ  ,0xAE  -- AE: LDX abs
    VAL     0,LST,XFR,Q_M,R_M,Ci_C,WS_X,OS_M,NZ  ,0xBE  -- BE: LDX abs,Y
    VAL     1,IDC,DEC,Q_M,R_K,Ci_0,WS_P,    ,NZ  ,0x00  -- CE: DEC abs
    VAL     1,IDC,DEC,Q_M,R_K,Ci_0,WS_P,    ,NZ  ,0x00  -- DE: DEC abs,X
    VAL     1,IDC,INC,Q_M,R_K,Ci_1,WS_P,    ,NZ  ,0x00  -- EE: INC abs
    VAL     1,IDC,INC,Q_M,R_K,Ci_1,WS_P,    ,NZ  ,0x00  -- FE: INC abs,X

--------------------------------------------------------------------------------

    VAL     0,LU ,BBR,L_K,R_M,Ci_C,    ,    ,BEQ ,K_0   -- 0F:+BBR0 dp,rel
    VAL     0,LU ,BBR,L_K,R_M,Ci_C,    ,    ,BEQ ,K_1   -- 1F:+BBR1 dp,rel
    VAL     0,LU ,BBR,L_K,R_M,Ci_C,    ,    ,BEQ ,K_2   -- 2F:+BBR2 dp,rel
    VAL     0,LU ,BBR,L_K,R_M,Ci_C,    ,    ,BEQ ,K_3   -- 3F:+BBR3 dp,rel
    VAL     0,LU ,BBR,L_K,R_M,Ci_C,    ,    ,BEQ ,K_4   -- 4F:+BBR4 dp,rel
    VAL     0,LU ,BBR,L_K,R_M,Ci_C,    ,    ,BEQ ,K_5   -- 5F:+BBR5 dp,rel
    VAL     0,LU ,BBR,L_K,R_M,Ci_C,    ,    ,BEQ ,K_6   -- 6F:+BBR6 dp,rel
    VAL     0,LU ,BBR,L_K,R_M,Ci_C,    ,    ,BEQ ,K_7   -- 7F:+BBR7 dp,rel
    VAL     0,LU ,BBS,L_K,R_M,Ci_C,    ,    ,BNE ,K_0   -- 8F:+BBS0 dp,rel
    VAL     0,LU ,BBS,L_K,R_M,Ci_C,    ,    ,BNE ,K_1   -- 9F:+BBS1 dp,rel
    VAL     0,LU ,BBS,L_K,R_M,Ci_C,    ,    ,BNE ,K_2   -- AF:+BBS2 dp,rel
    VAL     0,LU ,BBS,L_K,R_M,Ci_C,    ,    ,BNE ,K_3   -- BF:+BBS3 dp,rel
    VAL     0,LU ,BBS,L_K,R_M,Ci_C,    ,    ,BNE ,K_4   -- CF:+BBS4 dp,rel
    VAL     0,LU ,BBS,L_K,R_M,Ci_C,    ,    ,BNE ,K_5   -- DF:+BBS5 dp,rel
    VAL     0,LU ,BBS,L_K,R_M,Ci_C,    ,    ,BNE ,K_6   -- EF:+BBS6 dp,rel
    VAL     0,LU ,BBS,L_K,R_M,Ci_C,    ,    ,BNE ,K_7   -- FF:+BBS7 dp,rel

--------------------------------------------------------------------------------

_end:
