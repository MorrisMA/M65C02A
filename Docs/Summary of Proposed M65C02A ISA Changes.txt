Proposed changes to M65C02A Instruction Set

The proposed changes to the M65C02A instruction set and the rationale for the
changes is documented in this memorandun. The proposed changes in the M65C02A
instruction set are motivated by the following results with the PC65 compiler:

    (1) evaluation of Pascal / C logical operators require many cycles to imple-
        ment with the M65C02A instruction set;
    (2) the M65C02A Column 3 Forth IP (with autoincrement) instructions are not
        used by the PC65 compiler except for the LDA/STA/ADC ip,I++ instructions
        and the autoincrement feature frequently is in conflict with the desired
        operations, i.e. autoincrement of the Forth IP (when used to support
        general purpose register indirect addressing) is not always desired;
    (3) the order of operands on the M65C02A stack is in the reverse order of
        that required for comparison and subtraction.
    (4) the OSX prefix instruction is often paired with the IND prefix instruc-
        tion, and there is no available prefix instruction that combines these
        prefix instructions in a single prefix instruction like the ISZ prefix
        instruction. This lack of an OSX+IND leads to the PC65 code generator
        having the insert both the OSX and the IND prefix instructions for 
        operations that are frequently required to support the stack-relative
        addressing modes of the M65C02A of which the PC65 compiler makes frequent
        use.

The first item is discussed in "Speeding Up M65C02A Boolean Tests.txt". Essen-
tially the proposed changes make two modifications to the conditional branch
instructions of the M65C02A:

    (1) the BRA rel instruction is modified into a conditional instruction when
        the OSI / OSZ prefix instructions are applied. These prefix instructions
        change the BRA instruction to a branch instruction using 8-bit (OSI) or
        16-bit (OSZ) pc-relative branches conditional on whether the accumulator
        is non-zero, i.e., branch taken, or zero, i.e., branch not taken;
    (2) applying the OSX prefix instruction to the M65C02A branch instructions,
        i.e., BPL / BMI, BVC / BVS, BVC / BCS, and BNE / BEQ, in the form of
        OSX, OSZ, OSI, and OIS prefix instructions causes these instructions to
        store into the accumulator the CC flag used to determine if the branch
        is taken or not taken. In other words, if the branch is taken, CC = 1,
        then the accumulator is filled with a 0x0001, and if the branch is not
        taken, then the accumulator is filled with a 0x0000.

These modifications to the M65C02A branch instructions, reduce the execution
time of a PC65 logical test from 13(T)/18(F) cycles to 6(T)/7(F) cycles. Given
that the accumulator is used by the PC65 virtual machine to hold the boolean
variable that represents the logical state of the logic expression, the modifi-
cation of the conditional branch instructions is not expected to impact the
usage of the accumulator by the PC65 code generator.

The second item indicates that what is required is continued support for the
register indirect addressing mode provided by the Forth IP register. Instead of
the I++ addressing mode, what will be supported instead is an I,Y addressing
mode. The previously defined 16 instructions in the column 3 will have some 
instructions converted from the ip,I++ addressing mode to the I,Y addressing
mode, which is a register indirect post-indexed by Y addressing mode. Like other
post-indexed (by Y) addressing mode, this new addressing mode allows indirection
with post-indexing by Y: (I),Y. Incrementing the index, or the IP register, is
easy with the INY, or INI, instructions, respectively. It is also planned that a
decrement operation on IP will also be added to the instruction set. The new
decrement IP instruction, DEI, will be a two cycle instruction instead of the
one cycle increment IP instruction, INI, but it will save quite a few cycles if
decrementing IP is required. The instructions in column 3 supporting this new
addressing mode are: ADC/STA/LDA/CMP/SBC I,Y.

There are also a number of common operations that the 6502/65C02 ISA has not
supported that are commonly required: negating, complementing, and clearing the
accumulator. In the M65C02A, these operations require a significant number of 
instructions and memory cycles to implement. Therefore, 3 opcodes in column 3
will be used to support these common operations: NEG/CLR/CPL A.

Of the remaining 8 opcodes in column 3, 6 will be used to implement register
to register operations between the accumulator and the Y register. These
instructions will reverse the standard order of the operands, and thereby allow
the compare and subtraction operations to be performed without employing the 
XMA zp,X instruction to reverse operand order on the PC65 VM's evaluation stack.
These instructions are: ORA/AND/EOR/ADC/CMP/SBC Y. 

The remaining 2 opcodes in column 3 will use the IP register for register indi-
rect addressing. This new addressing mode will require a change to the figFORTH
port, but the changes are not very significant or burdensome. These two instruc-
tions are: STA/LDA I.

The definitions of the column 3 instructions follow:

0x03:   NEG  A      // A <= 0 - A
0x13:   ORA  Y      // A <= Y | A
0x23:   CLR  A      // A <= 0
0x33:   AND  Y      // A <= Y & A
0x43:   CPL  A      // A <= ~A
0x53:   EOR  Y      // A <= Y ^ A
0x63:   ADC  I,Y    // M <= [I+Y]; A <= M + A + C
0x73:   ADC  Y      // A <= Y + A + C
0x83:   STA  I,Y    // [I+Y] <= A
0x93:   STA  I      // [I] <= A
0xA3:   LDA  I,Y    // A <= [I+Y]
0xB3:   LDA  I      // A <= [I]
0xC3:   CMP  I,Y    // M <= [I+Y]; (SIZ ? {N,V,Z,C} : {N,Z,C}) <= M - A
0xD3:   CMP  Y      // (SIZ ? {N,V,Z,C} : {N,Z,C}) <= Y - A
0xE3:   SBC  I,Y    // M <= [I+Y]; A <= M + ~A + C
0xF3:   SBC  Y      // A <= Y + ~A + C

The third item describes an issue with how the PC65 compiler places the operands
on the stack when comparison / subtraction operations are required. The changes
to the column 3 instructions, shown in the preceding table, adjust the order of
operations for all instructions so that the operand on the top of the stack, M, 
or the Y register, is taken to be the left operand of the comparison / subtrac-
tion operation. This change means that an exchange between the accumulator and
the variable on the top of the stack are not required before a comparison / sub-
traction is performed. In addition, instead of using a stack-relative addressing
mode for accessing the variable on the top of the stack, which often requires
the compiler to also issue a pop instruction to properly maintain the stack, the
compiler can instead pop the variable on the top of the stack into the Y regis-
ter. The instructions in column 3 using Y and A as the operands can then be used
in a manner that orders the operations as needed for correct operations. The 
proposed instruction set changes in column 3 will save at least 7 cycles for
each comparison / subtraction performed by a PC65 program because the XMA zp 
instruction will not be required to correctly order the operands.

The fourth item requires the allocation of an opcoded and implementation of
another prefix instruction: OSI. This new prefix instruction combines OSX + IND
into a single instruction, and directly supports the improved boolean test mode
that will be added to the branch instructions. There are only five unused op-
codes remaining in the M65C02B opcode map: 0x02, 0x22, 0x42, 0x62, and 0x82. The
first of these, 0x02, is reserved for the M65C02A/B coprocessor interface. Thus,
0x42 will be allocated to implement the OSI prefix instruction. The other three
free opcodes will be used to implement three new instructions, which may be
useful with a C/C++ compiler:

0x22:   JSR I,Y
0x42:   OSI
0x62:   OWI
0x82:   JMP I,Y

The 0x22 opcocde performs a subroutine call using register indirect addressing
post-indexed by the Y index register. Similarly, the 0x82 opcode performs a jump
using register indirect addressing post-indexed by the Y index register. Both of
these instructions will support the use of the IND prefix instruction. If the
OSX prefix is also applied to the JSR I,Y instruction, the default stack, Sk, is
overridden, and the return address is pushed onto the auxiliary stack, Sx. Both
OSX and IND can be applied to the JSR I,Y instruction, with the expected beha-
vioral changes. The 0x62 opcode implements a register override prefix instruc-
tion, OWI, which will override the IP register with the W register. This allows
both the IP and W registers from the Forth VM logic to be used as register indi-
rect address pointers.

The document, "Speeding Up Stack-based Artihmetic Operations.txt", describes
several mechanisms for speeding up stack-based arithmetic operations: (1) con-
verting the SP-relative instruction to use the reverse operand order, and (2) 
potentially defining Column 3 instructions to use the register stacks and auto-
matically popping the operands from the stack to save the usual stack adjustment
operation performed after the arithmetic operation has been performed using
instructions that rely on the SP-relative addressing mode specific to the
M65C02A.

With the modifications described above to Column 3 instructions, the stack-based
arithmetic operations of the PC65 compiler result in shorter instruction sequen-
ces:

        ;--current sequence --
        pla.w       ; (4) Pull right operand from stack
        xma.w 1,S   ; (7) Exchange right and left operands, put right on stack
        sec         ; (1) Initialize C for subtraction
        sbc.w 1,S   ; (5) subtract: left - right,  A <= A - (1,S)
        adj #2      ; (2) adjust S, remove right operand from stack

        ;-- new sequence --
        pla.w       ; (4) pull right operand from stack
        ply.w       ; (4) pull left operand from stack
        sec         ; (1) initialize C for subtraction
        sbc.w Y     ; (1) A <= Y - A = Y + ~A + 1
        
This current sequence requires 19 cycles to perform subtraction / comparisons,
and the new sequence only requires 10 cycles to perform. The new sequence for 
subtraction / comparison usingthe new column 3 instructions is almost 2x faster
than the current sequence. It also makes additions, subtractions, and compari-
sons execute in the same number of cycles, which is also a good result.
