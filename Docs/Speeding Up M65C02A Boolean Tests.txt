The normal way of testing a boolean in Pascal, as defined in the current PC65
Mak-Pascal compiler, is to perform a comparison operation, followed by code to
set the accumulator to either a 1 (True) or a 0 (False). These operations are
generally followed by a second comparison operation which tests the boolean
value in the accumulator with a comparison against an immediate value of 1.

The result is that a simple logical test of any kind generally requires the
following instruction sequence to perform what would otherwise be a simple test
with a test and branch instruction:

        cmp.w 1,S       ; (5) compare operands
        
        php             ; (2) save P because lda #imm instruction affects flags
        lda #1          ; (2) load boolean True into accumulator
        plp             ; (2) restore flags set by comparison instruction
        bcc lbl_01      ; (3) if cc matches, leave True in acc, else load False
        lda #0          ; (2) load boolean False

lbl_01: cmp #1          ; (2) test acc for boolean True
        bne lbl_02      ; (2) branch to True label
        jmp lbl_03      ; (3) jump to False label
        
The recursive descent structure of the compiler makes combining the two tests
into a single comparison and branch operation a bit difficult. These operations
will probably have to remain separate, and any optimizations that can be applied
will have to be applied as peephole optimizations in the assemble and link
phase and not during the code generation phase. As it stands at the moment, the
first comparison operation requires 9 clock cycles if True and 11 if False. The
second test adds an additional 4 cycles if the first test is True or an addi-
tional 7 cycles if the first test was False. Altogether, a True test requires
13 cycles to implement and a False test requires 18 cycles to implement.

Since logical tests are such a big part of HLL programming, the M65C02A would be 
better suited for HLL use if there was a less expensive way of implementing such
a common operation. If the first test could automatically capture the test
result as a boolean in the accumulator, then a significant number of cycles 
would be saved. For example, if the M65C02A had a instruction that deposited the 
internal CC flag directly into the accumulator, then the first test sequence 
could be reduced for both true/false results from 9/11 cycles to just 3 cycles.
Similarly, if the second test could be performed without a comparison followed
by a branch instruction, then the overall operation could be reduced from 13/18
cycles to just 5/6 cycles for the True/False boolean conditional tests frequent-
ly used in HLLs. Such a reduction in the number of clock cycles required to 
implement conditional tests would significantly improve performance even if no
additional, post-compilation optimizations were performed.

The branch instructions of the 6502/65C02 are currently overloaded in the
M65C02A using the SIZ, IND, and ISZ prefix instructions. The SIZ prefix instruc-
tion causes the eight (8) 6502/65C02 branch instructions to support multi-flag
tests to implement four (4) signed comparisons, LT, LE, GE, and GT, and four (4)
unsigned comparisons, LO, LS (LOS), HS (HIS), and HI, while retaining an 8-bit
PC-relative displacement field. If the IND prefix is used, the the displacement
field of the 8 standard branch instructions is extended into a 16-bit PC-rela-
tive displacement field. If both SIZ and IND are applied, i.e. either by using
separate SIZ and IND prefix instructions, or the combination ISZ prefix instruc-
tion, then both modifications are applied to the 8 standard branch instructions;
the multi-flag signed/unsigned branch instructions have a 16-bit PC-relative
branch field.

If these existing instructions could be further modified by the addition of a
third prefix instruction, say OSX, then it would be possible to perform the
branch operation and simultaneously set the accumulator to the CC internal test
signal value. Without increasing the number of instruction bytes, the OSZ and 
OIS prefix codes which are equivalent to OSX+SIZ and OSX+IND+SIZ, respectively,
can be used to add this capability to the M65C02A. Adding OSZ would enable the
new capability to multi-flag signed/unsigned branch instructions with 8-bit 
PC-relative displacements, which are presently the most used branch instructions
in the Mak-Pascal compiler other than the standard beq/bne rel8 instructions.
The version of the M65C02A branch instructions with 16-bit displacements are
presently not used by the PC65 Mak-Pascal compiler's code generator.

The second test can also be sped up by using a different code sequence:

        lsr a           ; (1) Shift lsb(A) into C
        bcs lbl_02      ; (2) branch if C is set to True label
        jmp lbl_03      ; (3) jump to False label
        
With the changed suggested above, a conditional test would require just 6/7
clock cycles instead of 13/18 clock cycles. The change the the M65C02A branch
instructions would provide greater than 2x improvement for this common HLL
instruction sequence.

In the case of C, rather than Pascal, a boolean is true if it non-zero, false
otherwise. The previous instruction sequence could be implemented as:

        osz
        bra lbl_02
        jmp lbl_03
        
The bra rel instruction is presently implemented in the M65C02A such that its
behavior is only modified by the IND prefix instruction in the manner described
above for the other branch instructions: IND applied to a branch instruction 
extends the displacement from 8 bits to 16 bits. In the example above, OSX+SIZ
modifies the unconditional branch instruction into a conditional branch instruc-
tion that takes the branch if the accumulator is not zero, i.e. True, and does
not take the branch if the accumulator is zero, i.e. False. The number of cycles
for the second test is unchanged, i.e. 3 clock cycles, but the modification to
bra rel makes the instruction a more flexible way of handling boolean variable
testing in both C and Pascal. 

